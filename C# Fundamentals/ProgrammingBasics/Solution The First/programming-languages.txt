C - low level (which makes it easy to write a compiler), limited expressiveness (which makes less programming features to deal with, but more back end you have to write yourself), heavily influences all other modern programming languages. Programming culture recognizes it as a staple for CS knowledge.
Java - uses a virtual machine, which makes it a bit slower (though thanks to optimizations, it competes with C), but with significantly more fault tolerance, stability, and reflection. It's also open source, has a very large community, and can run in many platforms (including in web applets, and mobile, in addition to client or client/server). Remote debugging is a notable feature that makes it useful in production environments, and when combined with it's cost (free), makes it a standard for production client/server programming. Also the primary language used by Dalvik, the Android (mobile) platform.
Objective-C - the programming language used by iOS, which is a huge commercial success. Mostly backwards compatible with C. High performance, feature rich, excellent UI tool support, but very niche (though the niche is quite lucrative).
C++ - as C, but with additional expressiveness and library support. Better potential speed because of compiler optimizations and language features. Quite old as programming languages go, and therefore established, but also an evolving modern language that recently got some significant and powerful additions.
C# - Microsoft's somewhat proprietary competition to Java. Similar in most respects, but a bit younger (and not as established), supported by Microsoft (which has pros and cons), but higher performance than Java, approaching C and C++.
PHP - primarily a web language that acts as glue between databases and HTML on the server side. Not great performance, but reasonably flexible and powerful. Notable web applications like Facebook are were based on PHP (though I believe Facebook as gone to higher performance frameworks).